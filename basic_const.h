#ifndef _BASIC_H
#define _BASIC_H

#include <iostream>  // 包含输入输出流库，用于控制台输出
#include <windows.h> // 包含Windows API库，用于图形界面和声音
#include "block.h"
using namespace std; // 使用标准命名空间，省略std::

// Define the global variables
const int ROWS = 20;       // 游戏板的行数
const int COLS = 10;       // 游戏板的列数
const int BLOCK_SIZE = 30; // 每个方块的像素大小
const int SPEED = 500;     // 下落方块的初始速度，单位是毫秒
const int LEVELUP = 100;    // 升级所需分数
const char SHAPE[7][4][4][4] = {
    // 七种类型的方块在四种状态下的形状
    {// I形方块
     {{'1', '1', '1', '1'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '1', '0', '0'}},

     {{'1', '1', '1', '1'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '1', '0', '0'}}},

    {// “田”形方块
     {{'0', '1', '1', '0'},
      {'0', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '1', '0'},
      {'0', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '1', '0'},
      {'0', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '1', '0'},
      {'0', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}}},

    {// L形方块
     {{'1', '1', '1', '0'},
      {'1', '0', '0', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '0', '0', '0'},
      {'1', '0', '0', '0'},
      {'1', '1', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '0', '1', '0'},
      {'1', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '0', '0', '0'}}},

    {// 反L形方块
     {{'1', '1', '1', '0'},
      {'0', '0', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '1', '0', '0'},
      {'1', '0', '0', '0'},
      {'1', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '0', '0', '0'},
      {'1', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'1', '1', '0', '0'},
      {'0', '0', '0', '0'}}},

    {// T形方块
     {{'0', '0', '0', '0'},
      {'1', '1', '1', '0'},
      {'0', '1', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'0', '1', '1', '0'},
      {'0', '1', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'1', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'1', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '0', '0', '0'}}},

    {// 反Z形方块
     {{'0', '1', '1', '0'},
      {'1', '1', '0', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '0', '0', '0'},
      {'1', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '1', '0'},
      {'1', '1', '0', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '0', '0', '0'},
      {'1', '1', '0', '0'},
      {'0', '1', '0', '0'},
      {'0', '0', '0', '0'}}},

    {// Z形方块
     {{'1', '1', '0', '0'},
      {'0', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'1', '1', '0', '0'},
      {'1', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'1', '1', '0', '0'},
      {'0', '1', '1', '0'},
      {'0', '0', '0', '0'},
      {'0', '0', '0', '0'}},

     {{'0', '1', '0', '0'},
      {'1', '1', '0', '0'},
      {'1', '0', '0', '0'},
      {'0', '0', '0', '0'}}}

};

const COLORREF COLOR[7] = {
    // 七种类型的方块的颜色
    RGB(0, 255, 255), // 浅蓝色
    RGB(255, 255, 0), // 黄色
    RGB(255, 0, 0),   // 红色
    RGB(0, 255, 0),   // 绿色
    RGB(255, 0, 255), // 紫色
    RGB(0, 0, 255),   // 蓝色
    RGB(255, 165, 0)  // 橙色
};

struct GameState
{
  //保存游戏中的所有重要信息
    int score;        // The score of the game
    int level;        // The level of the game
    int speed;        // The speed of the game
    int lines;        // The number of lines cleared
    char grid[ROWS][COLS]; // The grid of the board
    Block block;      // The current falling block object
    Block nextBlock;  // The next block object to fall
};

// Declare the global objects

#endif